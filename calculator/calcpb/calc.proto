syntax = "proto3";

package calc;
option go_package="/calculator/calcpb";

message Sum {
  int32 first_number = 1;
  int32 second_number = 2;
}

message SumRequest {
  Sum sum = 1;
}

message SumResponse {
  int32 result = 1;
}

message PrimeNumberDecompositionRequest {
  int32 number = 1;
}

message PrimeNumberDecompositionResponse {
  int32 result = 1;
}

message ComputeAverageRequest {
  int32 number = 1;
}

message ComputeAverageResponse {
  double average = 1;
}

message FindMaximumRequest {
  int32 number = 1;
}

message FindMaximumResponse {
  int32 maximum = 1;
}

message SquareRootRequest {
  int32 number = 1;
}

message SquareRootResponse {
  double number_root = 1;
}

service CalculatorService{
  // Unary API
  rpc Sum(SumRequest) returns (SumResponse) {};
  // Streaming Server API
  rpc PrimeNumberDecomposition(PrimeNumberDecompositionRequest) returns (stream PrimeNumberDecompositionResponse) {};
  // Streaming Client API
  rpc ComputeAverage(stream ComputeAverageRequest) returns (ComputeAverageResponse) {};
  // BiDirectional Streaming
  rpc FindMaximum(stream FindMaximumRequest) returns (stream FindMaximumResponse) {};
  // Unary API used to implement an error, this RPC will throw an error if the sent number is negative
  // the error being sent is of type INVALID_ARGUMENT
  rpc SquareRoot(SquareRootRequest) returns (SquareRootResponse) {};
}